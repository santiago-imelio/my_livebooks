# Median Filter

```elixir
Mix.install([
  {:nx, "~> 0.7.1"},
  {:kino, "~> 0.12.3"},
  {:vega_lite, "~> 0.1.9"},
  {:tucan, "~> 0.3.1"},
  {:kino_vega_lite, "~> 0.1.11"},
  {:exla, "~> 0.7.1"},
  {:req, "~> 0.4.14"}
])
```

## Introduction

In this notebook we are going to implement the [Median Filter](https://en.wikipedia.org/wiki/Median_filter). It's a digital filtering technique used to remove noise from a signal, and we will demonstrate how it works by applying this filter to a severly corrupted image.

## Load the image

We will load the image data from a `.npy` file. The image was processed to only contain one color channel.

```elixir
url =
  "https://raw.githubusercontent.com/santiago-imelio/my_livebooks/median-filter-notebook/median_filter/files/balloons.npy"

img =
  Req.get!(url).body
  |> Nx.load_numpy!()
  |> Nx.as_type({:u, 8})
```

```elixir
Tucan.imshow(img, height: 480, width: 640)
```

## Implementation

The following is an implementation of 2-dimensional median filter. The boundary strategy in this case is given by how `Nx.slice/3` handles the edges when we compute a window.

```elixir
defmodule Filters do
  def median_filter_2d(t, opts \\ [kernel_size: 3]) do
    kernel_size = Keyword.get(opts, :kernel_size)

    {height, width} = Nx.shape(t)
    window_pad_size = round((kernel_size - 1) / 2)

    for i <- 0..(height - 1) do
      for j <- 0..(width - 1) do
        y_axis_start_idx =
          if i - window_pad_size <= 0 do
            0
          else
            round(i - window_pad_size)
          end

        x_axis_start_idx =
          if j - window_pad_size <= 0 do
            0
          else
            round(j - window_pad_size)
          end

        Nx.slice(t, [y_axis_start_idx, x_axis_start_idx], [kernel_size, kernel_size])
        |> Nx.median()
        |> Nx.to_number()
      end
    end
    |> Nx.tensor()
    |> Nx.as_type({:f, 32})
  end
end
```

```elixir
img_filt_3 = Filters.median_filter_2d(img, kernel_size: 3)
```

When we show the filtered image, we see a big improvement. There is still a lot of noise on the image, although now we can see more clearly the underlying picture.

```elixir
Tucan.imshow(img_filt_3, height: 480, width: 640)
```

Increasing the `kernel_size` parameter will help to reduce the noise even more. However, this will inevitably start to blur the image, given that increasing the kernel size implies computing bigger windows, hence using more neighbours to compute the median.

```elixir
img_filt_5 = Filters.median_filter_2d(img, kernel_size: 5)
Tucan.imshow(img_filt_5, height: 480, width: 640)
```

Even though our implementation works fine for this image, we can increase performance by refactoring our code using `Nx.Defn` module. That will allow us to run our code using a compiler such as [EXLA](https://hexdocs.pm/exla/EXLA.html).

## Optimization using Nx.Defn

```elixir
defmodule FiltersDefn do
  import Nx.Defn

  defn median_filter_2d(t, opts \\ [kernel_size: 3]) do
    kernel_size = opts[:kernel_size]
    kernel_tensor = Nx.broadcast(0.0, {kernel_size})
    {height, width} = Nx.shape(t)
    window_pad_size = Nx.round((kernel_size - 1) / 2)
    output = Nx.broadcast(0.0, Nx.shape(t))

    {_, _, _, _, _, _, result} =
      while {i = 0, t, kernel_tensor, height, width, window_pad_size, output}, i < height do
        row = Nx.broadcast(0.0, {elem(Nx.shape(t), 1)})

        {_, _, _, _, _, _, _, ith_row} =
          while {j = 0, t, i, kernel_tensor, height, width, window_pad_size, row}, j < width do
            y_axis_start_idx =
              if i - window_pad_size <= 0 do
                0
              else
                i - window_pad_size
              end
              |> Nx.as_type({:u, 8})

            x_axis_start_idx =
              if j - window_pad_size <= 0 do
                0
              else
                j - window_pad_size
              end
              |> Nx.as_type({:u, 8})

            ij_median =
              Nx.slice(
                t,
                [y_axis_start_idx, x_axis_start_idx],
                [elem(Nx.shape(kernel_tensor), 0), elem(Nx.shape(kernel_tensor), 0)]
              )
              |> Nx.median()
              |> Nx.broadcast({1})

            {j + 1, t, i, kernel_tensor, height, width, window_pad_size,
             Nx.put_slice(row, [j], ij_median)}
          end

        {i + 1, t, kernel_tensor, height, width, window_pad_size,
         Nx.put_slice(output, [i, j], Nx.stack(ith_row, axis: 0))}
      end

    result
  end
end
```

```elixir
params = [img, [kernel_size: 5]]
opts = [compiler: EXLA]
filt = Nx.Defn.jit_apply(&FiltersDefn.median_filter_2d/2, params, opts)
```

```elixir
Tucan.imshow(filt, height: 480, width: 640)
```
